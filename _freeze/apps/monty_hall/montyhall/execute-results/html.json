{
  "hash": "e32c1e17a5314154f8fd4dc2419ad3e6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \" \"\nformat: html\neditor: visual\n# server: shiny\n---\n\n\n# O problema de Monty Hall\n\n\n::: {.cell context='server'}\n\n```{.r .cell-code}\nlibrary(shinydashboard)\nlibrary(shiny)\nlibrary(ggplot2)\n\nui <- dashboardPage(dashboardHeader(title = \"Monty Hall\"),\n                    dashboardSidebar(\n                      \n                      conditionalPanel(condition = \"input.abaselecionada==1\",\n                                       radioButtons(\"portaescolhida\",\"Selecione a porta:\",choices = c(\"Porta 1\" = 1,\"Porta 2\" = 2,\"Porta 3\" = 3)),\n                                       checkboxInput(\"trocar1\",\"Trocar a porta inicialmente escolhida\",value = F),verbatimTextOutput(\"controlebotoes\"),\n                      actionButton(\"abrir\",label = \"Abrir uma porta\"),\n                      actionButton(\"novamente\",label = \"Sortear novamente\")),\n                      \n                      \n                      \n                      conditionalPanel(condition = \"input.abaselecionada==2\",\n                                       numericInput(\"nexp\",\"Número de experimentos:\",value = 10,min = 1),\n                                       radioButtons(\"troca\",\"Trocar ou não a porta escolhida inicialmente?\",choices = c(\"Trocar\" = T,\"Não trocar\" = F)),\n                                       radioButtons(\"exsimu\",\"Exibir:\",choices = c(\"Gráfico\" = 2, \"Resultados detalhados\" = 1),selected = 2))\n                      \n                      ,h6(\"Desenvolvido por:\"),\n                      tags$img(src=\"desenvolvido.png\",width=150)\n                    ),dashboardBody(\n                      \n                      tabsetPanel(type = \"tabs\",\n                                  \n                                  tabPanel(title = \"Experimentos isolados\",\n                                           column(width=4,imageOutput(\"porta1\")),\n                                           column(width=4,imageOutput(\"porta2\")),\n                                           column(width=4,imageOutput(\"porta3\")),value = 1),\n                                  \n                                  tabPanel(title = \"Simulações\",verbatimTextOutput(\"mensagens\"),plotOutput(\"grafico\"),value = 2)\n                                  \n                                  \n                                  ,id=\"abaselecionada\")\n                      \n                    )\n)\n\nserver <- function(input, output) {\n  \n  premiosort <- reactive({     #Realizar o sorteio fora do reactive abaixo para preservar o valor \n    temp <- input$novamente          #Tal variável é apenas armazenada, para que o reactive seja calculado novamente com a alteração  do seu valor\n    portas <- 1:3\n    premio <- sample(portas, size = 1)\n    premio\n  \n  })\n  \n  vetorsorteio <- reactive({\n    temp <- input$novamente  #Tal variável é apenas armazenada, para que o reactive seja calculado novamente com a alteração  do seu valor\n    portas <- 1:3\n    premio <- premiosort()\n    porta_escolhida <- as.numeric(input$portaescolhida)\n    portas_candidatas <- portas[-unique(c(premio,porta_escolhida))]\n    ifelse(test = length(portas_candidatas)==1,yes = porta_aberta <- portas_candidatas, no = porta_aberta <- sample(portas_candidatas,size = 1))\n    # if(input$troca1){\n    #   porta_escolhida <- portas[-unique(c(porta_escolhida,porta_aberta))]\n    # }\n    vetsort <- c(premio,porta_escolhida,porta_aberta)\n    vetsort\n  })\n  \n\n  output$testesorteio <- renderPrint({\n    if((input$abrir==0)||(input$abrir%%3==0)){\n      print(\"Todas fechadas\")\n    }else{\n      if((input$abrir%%3==1)){\n        print(\"Apenas uma porta aberta\")\n      }else{   # Se o resto da divisão for 2...\n        print(\"Todas as portas abertas\")\n      }\n    }\n  })\n  \n\n  output$porta1 <- renderImage({\n\n    p <- 1    #Número da porta\n    \n    #Se input$abrir for igual a 0 ou múltiplo de 3, todas as portas estarão fechadas\n    if((input$abrir==0)||(input$abrir%%3==0)){\n      #print(\"Todas fechadas\")\n      porta <- \"porta.png\"\n    }else{\n      if((input$abrir%%3==1)){\n        #print(\"Apenas uma porta aberta\")\n        if(vetorsorteio()[3]==p){\n          porta <- \"portabode.png\"     #Se for a porta aberta pelo mediador, não terá o prêmio\n        }else{\n          porta <- \"porta.png\"        #Caso contrário, permanecerá fechada\n        }\n      }else{   # Se o resto da divisão for 2...\n        #print(\"Todas as portas abertas\")\n        if(vetorsorteio()[1]==p){\n          porta <- \"portacarro.png\"\n          #condições\n          c1 <- ((vetorsorteio()[2]==p)&&!(input$trocar1))   #Se o prêmio esta nesta porta e tal porta foi escolhida e troca1 == F\n          c2 <- ((vetorsorteio()[2]!=p)&&(input$trocar1))    #Se o prêmio esta nesta porta e tal porta não foi escolhida e troca1 == T\n          if(c1||c2){  #Se a porta escolhida não for a do prêmio, para ganhar o usuário deverá trocá-la\n            porta <- \"portacarropremio.png\"\n          }\n        }else{\n          porta <- \"portabode.png\"\n          \n        }\n      }\n    }\n    return(list(\n      src = porta,\n      filetype = \"image/jpeg\",\n      alt = \"Porta 1\"))\n  \n  },deleteFile = F)\n\n  output$porta2 <- renderImage({\n\n    p <- 2    #Número da porta\n    \n    #Se input$abrir for igual a 0 ou múltiplo de 3, todas as portas estarão fechadas\n    if((input$abrir==0)||(input$abrir%%3==0)){\n      #print(\"Todas fechadas\")\n      porta <- \"porta.png\"\n    }else{\n      if((input$abrir%%3==1)){\n        #print(\"Apenas uma porta aberta\")\n        if(vetorsorteio()[3]==p){\n          porta <- \"portabode.png\"     #Se for a porta aberta pelo mediador, não terá o prêmio\n        }else{\n          porta <- \"porta.png\"        #Caso contrário, permanecerá fechada\n        }\n      }else{   # Se o resto da divisão for 2...\n        #print(\"Todas as portas abertas\")\n        if(vetorsorteio()[1]==p){\n          porta <- \"portacarro.png\"\n          #condições\n          c1 <- ((vetorsorteio()[2]==p)&&!(input$trocar1))   #Se o prêmio esta nesta porta e tal porta foi escolhida e troca1 == F\n          c2 <- ((vetorsorteio()[2]!=p)&&(input$trocar1))    #Se o prêmio esta nesta porta e tal porta não foi escolhida e troca1 == T\n          if(c1||c2){  #Se a porta escolhida não for a do prêmio, para ganhar o usuário deverá trocá-la\n            porta <- \"portacarropremio.png\"\n          }\n        }else{\n          porta <- \"portabode.png\"\n          \n        }\n      }\n    }\n    return(list(\n      src = porta,\n      filetype = \"image/jpeg\",\n      alt = \"Porta 2\"))\n\n  },deleteFile = F)\n\n  output$porta3 <- renderImage({\n    p <- 3    #Número da porta\n    \n    #Se input$abrir for igual a 0 ou múltiplo de 3, todas as portas estarão fechadas\n    if((input$abrir==0)||(input$abrir%%3==0)){\n      #print(\"Todas fechadas\")\n      porta <- \"porta.png\"\n    }else{\n      if((input$abrir%%3==1)){\n        #print(\"Apenas uma porta aberta\")\n        if(vetorsorteio()[3]==p){\n          porta <- \"portabode.png\"     #Se for a porta aberta pelo mediador, não terá o prêmio\n        }else{\n          porta <- \"porta.png\"        #Caso contrário, permanecerá fechada\n        }\n      }else{   # Se o resto da divisão for 2...\n        #print(\"Todas as portas abertas\")\n        if(vetorsorteio()[1]==p){\n          porta <- \"portacarro.png\"\n          #condições\n          c1 <- ((vetorsorteio()[2]==p)&&!(input$trocar1))   #Se o prêmio esta nesta porta e tal porta foi escolhida e troca1 == F\n          c2 <- ((vetorsorteio()[2]!=p)&&(input$trocar1))    #Se o prêmio esta nesta porta e tal porta não foi escolhida e troca1 == T\n          if(c1||c2){  #Se a porta escolhida não for a do prêmio, para ganhar o usuário deverá trocá-la\n            porta <- \"portacarropremio.png\"\n          }\n        }else{\n          porta <- \"portabode.png\"\n          \n        }\n      }\n    }\n    return(list(\n      src = porta,\n      filetype = \"image/jpeg\",\n      alt = \"Porta 3\"))\n    \n    \n    \n  },deleteFile = F)\n  \n\n  #Simulações ============================================\n    \n  simulacoes <- reactive({\n    \n    todos_experimentos <- matrix(0,5,input$nexp)\n    for(i in 1:input$nexp){\n      msg <- NULL\n      portas <- 1:3\n      premio <- sample(portas,1)\n      porta_escolhida1 <- sample(portas,1)\n      portas_candidatas <- portas[-unique(c(premio,porta_escolhida1))]\n      ifelse(test = length(portas_candidatas)==1,yes = porta_aberta <- portas_candidatas, no = porta_aberta <- sample(portas_candidatas,size = 1))\n      if(input$troca){\n        porta_escolhida2 <- portas[-unique(c(porta_escolhida1,porta_aberta))]\n      }else{\n        porta_escolhida2 <- porta_escolhida1\n      }\n      if(porta_escolhida2==premio){\n        ganho <- 1\n      }else{\n        ganho <- 0\n      }\n      #Preencher colunas matriz\n      todos_experimentos[,i] <- cbind(premio,porta_escolhida1,porta_aberta,porta_escolhida2,ganho)\n    }\n    todos_experimentos\n    \n  })\n  \n\n  output$mensagens <- renderPrint({\n    if(input$exsimu==1){\n      for(i in 1:input$nexp){\n        cat(\"=================================================\",\"\\n\")\n        cat(\"Realização do experimento na\",i,\"ª tentativa\",\"\\n\")\n        cat(\"=================================================\",\"\\n\")\n        cat(\"O prêmio está na porta\",simulacoes()[1,i],\"\\n\")\n        cat(\"O participante selecionou a porta\",simulacoes()[2,i],\"\\n\")\n        cat(\"O mediador abriu a porta\",simulacoes()[3,i],\"\\n\")\n        if(simulacoes()[2,i]==simulacoes()[4,i]){\n          cat(\"O participante não trocou a porta.\",\"\\n\")\n        }else{\n          cat(\"O participante alterou para a porta\",simulacoes()[4,i],\"após abertura da porta\",simulacoes()[3,i],\".\",\"\\n\")\n        }\n        if(simulacoes()[5,i]==1){\n          cat(\"O participante ganhou o prêmio!\")\n        }else{\n          cat(\"O participante não ganhou o prêmio.\")\n        }\n        cat(\"\\n\",\"\\n\",\"\\n\")\n      }\n    }\n  })\n  \n  \n  output$grafico <- renderPlot({\n\n    #Criação do data frame\n    if(input$exsimu==2){\n      ganhou <- sum(simulacoes()[5,])   # Número de vezes em que o participante ganhou\n      perdeu <- input$nexp-ganhou       # Número de vezes em que o participante perdeu\n      resumo <- data.frame(\"Resultado\" = as.factor(c(rep(\"Ganhou\",ganhou),rep(\"Perdeu\",perdeu))))   \n      \n      ggplot(data= resumo,aes(x = Resultado,fill = Resultado ))+geom_bar()+\n        scale_fill_brewer(palette = \"Dark2\")+theme(legend.position = \"none\")+ylab(\"\")\n    }else{\n      return(NULL)\n    }\n\n  })\n\n  \n}\n\nshinyApp(ui, server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n",
    "supporting": [
      "montyhall_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}